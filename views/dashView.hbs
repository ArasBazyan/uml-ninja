<!DOCTYPE html>
<html lang="en">
<head>
    <title>Bootstrap Example</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
    <script src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>">

<style>
    body {
        font-family: Avenir, sans-serif !important;
        background: whitesmoke;
    }

    h3 {
        margin-top: 0;
        margin-bottom: 12px;

    }
    .row {
        margin-right: -12px;
        margin-left: -12px;
    }

    .center {
        display: block;
        margin-left: auto;
        margin-right: auto;
    }

    .jumbotron{
        padding: 5px !important;
    }
    .progress-bar{
        cursor:pointer
    }

    .column {
        background-color: white;
        margin: 6px;
        float: left;
        width: 38%;
        padding: 20px;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    /* Responsive layout - makes the three columns stack on top of each other instead of next to each other */
    @media screen and (max-width: 600px) {
        .jumbotron {
            padding: 5px !important;
        }
        .column {
            width: 100%;
        }
    }
</style>

</head>
<body>
<div id="main" class="container-fluid">
    <div class="row content">
        <div class="col-sm-12">
            <!--  Dashboard text-->
            <div style="margin: 15px auto"  class="well">
                <h3> Dashboard </h3>
                <p> Information about repository <b>{{ data.ProjectName }}</b></p>
                <p> Number of contributors: <b> {{  data.Contributers }} </p></b>
                <p> Github API link: <b><a href="{{ data.ProjectUrl }}">{{ data.ProjectUrl }}</a> </p></b>
            </div>

            <div class="row">
                <!-- Score column -->
                <div class="column" style="text-align: center; width: 300px; min-height: 400px">
                    <div>
                        <img src="/img/ninja.png"  class="center" alt=ninjaa.png height="150" width="150">
                    </div>
                    <h3 style="text-align: center; padding: 6px;" id="score">Score
                    </h3>
                    <a style="margin-left: auto; margin-right: auto;" href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-text="Score of UML Documentation Practices in my project " data-hashtags="UMLninja" data-show-count="false">Tweet</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
                    <br>
                    <br> <a target="_blank" href="https://bellekens.com/uml-best-practices/">UML Best Practices </a><br>
                    <br><a target="_blank" href="https://bellekens.com/uml-best-practices/">UML Best Practices </a><br>
                    <br><a target="_blank" href="https://bellekens.com/uml-best-practices/">UML Best Practices </a><br>
                    <br><a target="_blank" href="https://bellekens.com/uml-best-practices/">UML Best Practices </a><br>
                    <br><a target="_blank" href="https://bellekens.com/uml-best-practices/">UML Best Practices </a><br>

                </div>

                <div class="column">
                    <h3> Documentation Process </h3>
                    <div class="row marketing">
                        <div class="jumbotron">
                            <div class="table-responsive">
                                <table class="table tablesorter">
                                    <thead>
                                    <tr>
                                        <th><h4>Level up</h4></th>
                                        <th class="col-md-5"><h4>Level</h4></th>
                                    </tr>
                                    </thead>
                                    <tbody id="process-table">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="column">
                    <h3> UML Content - Class Diagram </h3>
                    <div class="row marketing">
                        <div class="jumbotron">
                            <div class="table-responsive">
                                <table class="table tablesorter">
                                    <thead>
                                    <tr>
                                        <th><h4>Level up</h4></th>
                                        <th class="col-md-5"><h4>Level</h4></th>
                                    </tr>
                                    </thead>
                                    <tbody id="content-table">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div id="mtest"> </div>

            <!-- MODAL - Commit Ratio INFO -->
            <div class="modal fade" id="uml-commit-ratio-info" role="dialog">
               <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">UML Commit Ratio Indicator</h4>
                        </div>
                        <div class="modal-body">
                            <br>
                            <h5>UML Commit Ratio is the ratio between UML commits to all commits in a project  </h5>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>
          


            <!-- MODAL - Commit Ratio DETAIL-->
            <div class="modal fade" id="uml-commit-ratio-detail" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Commit Ratio</h4>
                        </div>
                        <div class="modal-body">
                            <div id="chartContainer" style="height: 370px; width: 100%;"></div>
                            <br>
                            <br>
                            <h4 id="commitRatio" >Commit Ratio </h4>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>

            <!-- MODAL - Doc Evolution INFO -->
            <div class="modal fade" id="document-evolution-info" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Document Evolution Indicator</h4>
                        </div>
                        <div class="modal-body">
                            <br>
                            <h5>Document Evolution is the ratio between UML commits to document size </h5>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>

            <!-- MODAL - Doc Evolution DETAIL -->
            <div class="modal fade" id="document-evolution-detail" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Document Evolution</h4>
                        </div>
                        <div class="modal-body">
                            <div id="docChartContainer" style="height: 370px; width: 100%;"></div>
                            <br>
                            <br>
                            <h4 id="docEvolution"> Doc. size ratio to UML commits </h4>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="avsc-info" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">AvsC Indicator</h4>
                        </div>
                        <div class="modal-body">
                            <br>
                            <h5>Relation between the number of attributes and
                                number of classes. This metrics is defined as AvsC =
                                ( NAMNAM +NCM )2 where NAM is the total number of attributes in the model, NCM is the total number of classes
                                in the model, and (NAM + NCM) > 0. </h5>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>
         </div>
    </div>
</div>

<script>

var indicatorEnum = {
  PROCESS: 'process-table',
  CONTENT: 'content-table'
};

var processIndicators = [];
var contentIndicators = [];

function Indicator(name,value,minVal,maxVal,type){
  this.name = name;
  this.value = value;
  this.minVal = minVal;
  this.maxVal = maxVal;
  this.type = type;

  this.infoLink = function(){
    return this.name.replace(/\W+/g, '-').toLowerCase() + "-info";
  }

  this.detailLink = function(){
    return this.name.replace(/\W+/g, '-').toLowerCase() + "-detail";
  }

  this.adjustedValue = function(){
      if (this.name == "UML Commit Ratio" || this.name == "Document Evolution" ) {
        console.log(this.value);
        if (this.value >= 0 && this.value <= 0.2){
        return 1;
      }
      if (this.value > 0.2 && this.value <= 0.4){
        return 2;
      }
      if (this.value > 0.4 && this.value <= 0.6){
        return 3;
      }
      if (this.value > 0.6 && this.value <= 0.8){
        return 4;
      }
      if (this.value > 0.8){
        return 5;
      }
      else {
        return 0;
      }
    }

    else {
      var newValue = ((value - minVal) / (maxVal - minVal)) * 5;
      if (newValue < 0.5) {
        return 1;
      }
      else if (newValue > 5 && this.name == "APPM") {
        return 1; 
      }
      else return Math.round(newValue);
    }
  }

  this.update = function(property,updatedValue){
    switch (property){
      case "name":
        this.name = updatedValue;
        break;

      case "value":
        this.value = updatedValue;
        break;

      case "minVal":
        this.minVal = updatedValue;
        break;

      case "maxVal":
        this.maxVal = updatedValue;
        break;

      /*case "link":
        this.link = updatedValue;
        break;*/

      case "type":
        this.type = updatedValue;
        break;

      default:
        Console.log("Property name " + property + " does not exist in Indicators");
    }
  }
}

// Maybe dont even need to have 2 arrays for each separate indicator type as type is already stored.
function addIndicator (name,value,minVal,maxVal,type){
  var x = new Indicator(name,value,minVal,maxVal,type);
  switch(type){
    case indicatorEnum.PROCESS:
      processIndicators.push(x);
      break;

    case indicatorEnum.CONTENT:
      contentIndicators.push(x);
  }
}

function changeIndicatorValue (indicatorName, propertyName, updatedValue){
  var processIndex = processIndicators.indexOf(indicatorName);
  var contentIndex = contentIndicators.indexOf(indicatorName);

  if (processIndex != -1){
    processIndicators[processIndex].update (propertyName,updatedValue);
  }
  else if (contentIndex != 1){
    contentIndicators[contentIndex].update(propertyName,updatedValue);
  }

  else {
    Console.log("Indicator of the name " + indicatorName + " does not exist.");
  }
}

//That's how the data object should look like.
var exampleDataObject =
        [{
            "indicatorName": "UML Commit Ratio",
            "indicatorInfoModal": "commit-ratio-info",
            "IndicatorDetailModal": "commit-ratio-detail",
            "indicatorLevel": 1
        },
            {
                "indicatorName": "Document Evolution",
                "indicatorInfoModal": "/doc-evolution/",
                "IndicatorDetailModal": "doc-evolution",
                "indicatorLevel": 2
            },
            {
                "indicatorName": "Document Evolution",
                "indicatorInfoModal": "/doc-evolution/",
                "IndicatorDetailModal": "doc-evolution",
                "indicatorLevel": 3
            },
            {
                "indicatorName": "Document Evolution",
                "indicatorInfoModal": "/doc-evolution/",
                "IndicatorDetailModal": "doc-evolution",
                "indicatorLevel": 4
            }];


    // This is how a new object (indicator) is added. Logic is needed to make level dynamic based on calx.
    exampleDataObject.push({"indicatorName" : "This is pushed later", "indicatorLink" : "/there/" , "indicatorLevel" : 5});

    /*function doModal(heading, formContent) {
      console.log("This is called with heading " + heading + " and content " + formContent);
      $('#avsc-info .modal-body').text(heading);
      $('#avsc-info .modal-title').text(formContent);
    }*/

// make ID a parameter
function createModal() {
    var mo = "<div class='modal fade' id='commit-ratio-info' role='dialog'><div class='modal-dialog'><div class='model-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal'>&times;</button><h4 class='modal-title'>YYYYYYYYAAAAAAAA </h4></div><div class='modal-body'><h5>WWWOOOOHHHOOOOO  </h5></div><div class='modal-footer'></div></div></div></div>";
    console.log(mo);
    var here = $('#mtest');
    console.log(here);
    here.html(mo);
}

    /*
    $("#avsc-info").on("show.bs.collapse shown.bs.collapse",function(event){
      alert("Test");
    });
    */

    function createTable (object, tbody){
        var tBody = document.getElementById(tbody);
        for (var i = 0; i < object.length; i++) {
            console.log("Adjusted value for " + object[i].name + " is " + object[1].adjustedValue());


            var tr = "<tr>";

            tr += "<td><a data-toggle= 'modal' data-target=#" + object[i].infoLink()+ ">" + object[i].name + "</a></td> ";

            //var mymodal = $('#uml-commit-ratio-info');
            //mymodal.find('.modal-body').text('helllloooooo');

            if (object[i].adjustedValue() == 1) {
                console.log("Level is 1");
                tr += " <td><div class='progress'><div class='progress-bar progress-bar-danger' data-toggle= 'modal' data-target=#" + object[i].detailLink() + " role='progressbar' style='width: 20%' > <span><strong>" + object[i].adjustedValue() + "/5 </strong></span></div></div></td></tr>"

            }
            if (object[i].adjustedValue() == 2) {
                console.log("Level is 2");
                tr += " <td><div class='progress'><div class='progress-bar progress-bar-warning' data-toggle= 'modal' data-target=#" + object[i].detailLink() + " role='progressbar' style='width: 40%' > <span><strong>" + object[i].adjustedValue() + "/5 </strong></span></div></div></td></tr>"
            }
            if (object[i].adjustedValue() == 3) {
                console.log("Level is 3");
                tr += " <td><div class='progress'><div class='progress-bar progress-bar-warning' data-toggle= 'modal' data-target=#" + object[i].detailLink() + " role='progressbar' style='width: 60%' > <span><strong>" + object[i].adjustedValue() + "/5 </strong></span></div></div></td></tr>"
            }
            if (object[i].adjustedValue() == 4) {
                console.log("Level is 4");
                tr += " <td><div class='progress'><div class='progress-bar progress-bar-info' data-toggle= 'modal' data-target=#" + object[i].detailLink() + " role='progressbar' style='width: 80%' > <span><strong>" + object[i].adjustedValue() + "/5 </strong></span></div></div></td></tr>"
            }
            if (object[i].adjustedValue() == 5) {
                console.log("Level is 5");
                tr += " <td><div class='progress'><div class='progress-bar progress-bar-success' data-toggle= 'modal' data-target=#" + object[i].detailLink() + " role='progressbar' style='width: 100%' > <span><strong>" + object[i].adjustedValue() + "/5 </strong></span></div></div></td></tr>"
            }
            tBody.innerHTML += tr;
        }
    }

    /* Global variables used to manipulate UI views */
    var score = 0;
    /* End of Global variable section */

    allData = {
        idProject : {{ data.idProject }},
        projectName : "{{data.ProjectName}}",
        projectURL : "{{ data.ProjectUrl }}",
        contributors : {{ data.Contributers }},
        documentName : "{{ data.DocumentName }}",
        allCommits : {{ data.NumberOfCommits }},
        umlCommits : {{ data.UMLCommits }},
        docSize : {{ data.DocumenSize }},
        aVsC : {{ data.AvsC }},
        asVsC : {{ data.ASvsC }},
        meVsC : {{ data.MevsC }},
        appm : {{ data.APPM }},
        depVsC : {{ data.DEPvsC }},
        dam : {{ data.DAM }},
        noc : {{ data.NOC }},
        noa : {{ data.NOA }},
        nom : {{ data.NOM }},
        diagramLoc : "{{ data.diagramLoc }}"

    };

    temp = [];
    //push all data in array for when it's needed
    temp.push(allData);
    console.log(temp);


    /* RATIO VALUES */
    var commitRatio = allData.umlCommits / allData.allCommits;
    commitRatio = commitRatio * 10;
    var docSize = allData.docSize;

    var documentEvolution = allData.docSize / allData.umlCommits;
    addIndicator("AvsC",allData.aVsC, 0, 1, indicatorEnum.CONTENT);
    addIndicator("ASvsC",allData.asVsC, 0, 1, indicatorEnum.CONTENT);
    addIndicator("MevsC",allData.meVsC, 0, 1, indicatorEnum.CONTENT);
    addIndicator("APPM",allData.appm, 0, 1, indicatorEnum.CONTENT);
    addIndicator("DEPvsC",allData.depVsC, 1, 0, indicatorEnum.CONTENT);
    addIndicator("DAM",allData.dam, 0, 1, indicatorEnum.CONTENT);

    addIndicator("UML Commit Ratio", commitRatio, 0, 0, indicatorEnum.PROCESS);
    addIndicator("Document Evolution", documentEvolution, 0, 0, indicatorEnum.PROCESS);


    console.log("Project ID  " + allData.idProject);

// create graphs
window.onload = function() {
    var dataPointsPie = [];
    var dataPointsDoc = [];

    /*var testDataPoints = [];
    testDataPoints.push({y: 20, label: "Test1"});
    testDataPoints.push({y: 10, label: "Test2"});*/

    var processData = [];
    var contentData = [];
    temp.forEach( function (arrayItem)
    {
        //data for uml commits
        dataPointsPie.push({y: arrayItem.allCommits , name : "All Commits" });
        dataPointsPie.push({y: arrayItem.umlCommits , name : "UML Commits" });

        // data for  doc evolution
        dataPointsDoc.push({y: arrayItem.docSize , label : "Document Size, in MB" });
        dataPointsDoc.push({y: arrayItem.umlCommits , label : "Number of UML Commits" });
    });

    createTable(processIndicators, 'process-table' );
    createTable(contentIndicators , 'content-table');


    var chart = new CanvasJS.Chart("chartContainer", {
        exportEnabled: true,
        animationEnabled: true,
        title: {
            text: "All Commits vs. UML Commits"
        },
        theme: "theme2",
        legend: {
            cursor : "pointer",
            itemclick: explodePie
        },
        data: [{
            type: "doughnut",
            showInLegend: true,
            startAngle: 240,
            percentFormatString: "#0.##",
            toolTipContent: "{y}",
            yValueFormatString: "##0 Commits",
            indexLabel: "#percent%",
            dataPoints: dataPointsPie

        }]
    });
    chart.render();
    //commitRatio = commitRatio * 10;
    $('#commitRatio').html("Commit ratio: " + commitRatio.toFixed(2).bold().big());



// Another way to get alldata, as an array
    /*
    var arrayData = [];
    arrayData.push({{ data.idProject }});
    arrayData.push("{{ data.ProjectName }}");
    arrayData.push("{{ data.ProjectUrl }}");
    arrayData.push({{ data.Contributers }});
    arrayData.push("{{ data.DocumentName }}");
    arrayData.push({{ data.NumberOfCommits }});
    arrayData.push({{ data.UMLCommits }});
    arrayData.push({{ data.DocumenSize }});
*/

    var docChart = new CanvasJS.Chart("docChartContainer", {
        exportEnabled: true,
        animationEnabled: true,
        title: {
            text: "All Commits vs. UML Commits"
        },
        theme: "theme2",
        legend: {
            cursor : "pointer",
            itemclick: explodePie
        },
        data: [{
            type: "column",
            startAngle: 240,
            dataPoints: dataPointsDoc

        }]
    });
    $('#docEvolution').html("Document Evolution: " + documentEvolution.toFixed(3).bold().big());
    docChart.render();

/*docChart.options.data[0].dataPoints = testDataPoints;
docChart.render();*/

//From Canvasjs
function explodePie (e) {
    if(typeof (e.dataSeries.dataPoints[e.dataPointIndex].exploded) === "undefined" || !e.dataSeries.dataPoints[e.dataPointIndex].exploded) {
        e.dataSeries.dataPoints[e.dataPointIndex].exploded = true;
    } else {
        e.dataSeries.dataPoints[e.dataPointIndex].exploded = false;
    }
    e.chart.render();
}

    // Sum up score from the indicators
    for(var i = 0; i< processIndicators.length; i++){

        console.log("sc PD: " + processIndicators[i].indicatorLevel);
        score += processIndicators[i].adjustedValue();
    }

    for(var i = 0; i< contentIndicators.length; i++){

        console.log("sc CD: " + contentIndicators[i].indicatorLevel);
        score += contentIndicators[i].adjustedValue();
    }

    var scoreEl = $('#score').html("Score: " + score + '/' + 30);
}
</script>

<script src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
<script src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>
</body>
</html>