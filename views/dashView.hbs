<!DOCTYPE html>
<html lang="en">
<head>
    <title>Documentation Ninja</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
    <script src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

<style>
    body {
        
        background:
        linear-gradient(to right, #375eb5, #3199b1) !important;
        linear-gradient(45deg, hsla(130, 46%, 31%, 0.95) 0%, hsla(215, 53%, 50%, 0) 70%),
        linear-gradient(135deg, hsl(128, 38%, 33%) 10%, hsla(149, 100%, 40%, 0) 80%),
        linear-gradient(225deg, hsl(184, 95%, 34%) 10%, hsla(184, 89%, 38%, 0) 80%),
        linear-gradient(315deg, hsl(186, 61%, 37%) 100%, hsla(253, 56%, 43%, 0) 70%);


/*
        linear-gradient(45deg, hsl(130, 43%, 27%) 0%, hsla(215, 53%, 50%, 0) 70%), 
        linear-gradient(135deg, hsl(128, 34%, 28%) 10%, hsla(149, 100%, 40%, 0) 80%), 
         /* linear-gradient(225deg, hsla(184, 89%, 38%, 1) 10%, hsla(184, 89%, 38%, 0) 80%), 
        linear-gradient(315deg, hsla(253, 56%, 43%, 1) 100%, hsla(253, 56%, 43%, 0) 70%);
        */
/*linear-gradient(45deg, hsl(129, 41%, 26%) 0%, hsla(215, 53%, 50%, 0) 70%),         linear-gradient(135deg, hsl(126, 39%, 27%) 10%, hsla(149, 100%, 40%, 0) 80%),         linear-gradient(225deg, hsl(184, 100%, 33%) 10%, hsla(184, 89%, 38%, 0) 80%),         linear-gradient(315deg, hsl(186, 51%, 36%) 100%, hsla(253, 56%, 43%, 0) 70%) */
        /*
    background:
        -webkit-linear-gradient(45deg, hsla(215, 53%, 50%, 1) 0%, hsla(215, 53%, 50%, 0) 70%),
        -webkit-linear-gradient(315deg, hsla(149, 100%, 40%, 1) 10%, hsla(149, 100%, 40%, 0) 80%),
        -webkit-linear-gradient(225deg, hsla(184, 89%, 38%, 1) 10%, hsla(184, 89%, 38%, 0) 80%),
        -webkit-linear-gradient(135deg, hsla(253, 56%, 43%, 1) 100%, hsla(253, 56%, 43%, 0) 70%);
    background:
        linear-gradient(45deg, hsla(215, 53%, 50%, 1) 0%, hsla(215, 53%, 50%, 0) 70%),
        linear-gradient(135deg, hsla(149, 100%, 40%, 1) 10%, hsla(149, 100%, 40%, 0) 80%),
        linear-gradient(225deg, hsla(184, 89%, 38%, 1) 10%, hsla(184, 89%, 38%, 0) 80%),
        linear-gradient(315deg, hsla(253, 56%, 43%, 1) 100%, hsla(253, 56%, 43%, 0) 70%);
    */
        font-family: Avenir, sans-serif !important;
    }
    .colorful {
        background:
        -webkit-linear-gradient(45deg, hsla(207, 66%, 62%, 1) 0%, hsla(207, 66%, 62%, 0) 70%),
        -webkit-linear-gradient(315deg, hsla(141, 100%, 49%, 1) 10%, hsla(141, 100%, 49%, 0) 80%),
        -webkit-linear-gradient(225deg, hsla(193, 100%, 46%, 1) 10%, hsla(193, 100%, 46%, 0) 80%),
        -webkit-linear-gradient(135deg, hsla(168, 100%, 47%, 1) 100%, hsla(168, 100%, 47%, 0) 70%);
        background:
        linear-gradient(45deg, hsla(207, 66%, 62%, 1) 0%, hsla(207, 66%, 62%, 0) 70%),
        linear-gradient(135deg, hsla(141, 100%, 49%, 1) 10%, hsla(141, 100%, 49%, 0) 80%),
        linear-gradient(225deg, hsla(193, 100%, 46%, 1) 10%, hsla(193, 100%, 46%, 0) 80%),
        linear-gradient(315deg, hsla(168, 100%, 47%, 1) 100%, hsla(168, 100%, 47%, 0) 70%);
    }
    
    h3 {
        margin-top: 0;
        margin-bottom: 12px;

    }
    .row {
        display: flex;
        margin-right: -12px;
        margin-left: -12px;
    }
    .well p{
        margin: 0 0 2px;
    }

    .center {
        display: block;
        margin-left: auto;
        margin-right: auto;
    }

    .jumbotron{
        padding: 5px !important;
        width: 100%;
    }
    .progress-bar{
        cursor:pointer
    }

    .column{
        float: left;
        width: 48%;
        padding: 16px;
        margin: 0 0 25px 15px;
        background-color: #dededede;
        border: 1px solid #e3e3e3;
        border-radius: 4px;
        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.05);
        box-shadow: 0 0 10px 0 #003e27;
    }

    .smallColumn {
        background-color: #dededede;
        border: 1px solid #e3e3e3;
        border-radius: 4px;
        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.05);
        box-shadow: 0 0 10px 0 #003e27;
        text-align: center;
        margin-left: 10px;
        margin-top: 10px;
        float: left;
        width: 20%;
        height:100%;
        padding: 20px;
    }

    .bigCollumn{
        margin-left: 10px;
        float: left;
        width: 77%;
        height:100%;
        padding: 10px;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    .fa{
        font-size: 2em;
    }
    .modal-content-size{
        display: table;
        width: 900px;
        right: 21%;
    }

    .modal-body-size{
        padding: 0 40px 10px 0;
    }

    .flex-container {
        display: flex;
        margin-top: 15px;
        justify-content: center;
    }

    .flex-container > div {
        background-color: #ececec;
        margin-left: 15px;
        margin-bottom: 10px;
        padding: 15px;
        text-align: center;
    }

    .nav-tabs{
        margin-bottom: 8px;
        border-bottom: 1px solid #adada5;
    }
    .nav>li>a {
        position: relative;
        display: block;
        padding: 5px 6px;
    }

    /* Responsive layout - makes the three columns stack on top of each other instead of next to each other */
    @media screen and (max-width: 600px) {
        .jumbotron {
            padding: 5px !important;
        }
        .column {
            width: 100%;
        }
    }
</style>

</head>
<body>

<div id="main" class="container-fluid">
    <div class="flex-container">
        <div>
            <i class="fa fa-github-alt"></i>
            <p id="repoName">Repository <br><b></b></p>
        </div>
         <div>
            <i class="fa fa-github"></i>
            <p>Github API link: <br> <b><a href="{{ data.ProjectUrl }}">{{ data.ProjectUrl }}</a></b></p>
        </div>
        <div>
            <i class="fa fa-users"></i>
            <p> Number of contributors:<br> <b>{{ data.Contributers }}</b></p>
        </div>
        <div>
            <i class="fa fa-language"></i>
            <p id="mainPL"> Main programming languages:<br> <b> C++ </b></p>
        </div>
    </div>

            <!--  Dashboard text
            <div style="margin: 5px auto; padding: 10px;"  class="well">
                <h4> Dashboard </h4>
                <p> Information about repository <b>{{ data.ProjectName }}</b></p>
                <p> Number of contributors: <b> {{  data.Contributers }} </b></p>
                <p> Github API link: <b><a href="{{ data.ProjectUrl }}">{{ data.ProjectUrl }}</a></b> </p>
            </div> -->

    <div class="row">

    <!-- Score column style="text-align: center; width: 300px; min-height: 400px" -->
        <div class="smallColumn" >
            <div>
                <img src="/img/github.gif"  class="center" alt=ninja.png height="150" width="190">
            </div>
            <h3 style="text-align: center; padding: 6px;" id="score">Score</h3>

            <h3 style="text-align: center; padding: 6px; margin-top: 10px" id="umlScore">Score</h3>

            <a style="margin-left: auto; margin-right: auto;" href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-text="Score of UML Documentation Practices in my project " data-hashtags="UMLninja" data-show-count="false">Tweet</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
            <br>
            <br> <a target="_blank" href="https://bellekens.com/uml-best-practices/">UML Best Practices </a><br>
            <br><a target="_blank" href="https://bellekens.com/uml-best-practices/">UML Best Practices </a><br>
            <br><a target="_blank" href="https://bellekens.com/uml-best-practices/">UML Best Practices </a><br>
            <br><a target="_blank" href="https://bellekens.com/uml-best-practices/">UML Best Practices </a><br>
            <br><a target="_blank" href="https://bellekens.com/uml-best-practices/">UML Best Practices </a><br>
        </div>

        <div class="bigCollumn">
            <div class="row">
                <div class="column">
                    <h3> Documentation Process </h3>
                    <div class="row marketing">
                        <div class="jumbotron">
                            <div class="table-responsive">
                                <table class="table tablesorter">
                                    <thead>
                                    <tr>
                                        <th><h4>Level up</h4></th>
                                        <th class="col-md-5"><h4>Level</h4></th>
                                    </tr>
                                    </thead>
                                    <tbody id="doc-process-table">
                                    <td> <a data-toggle="modal" data-target="#doc-process-version-control-info">Version Control</a></td>
                                    <td>
                                        <label>
                                            <i id="versionControlled" style="display: none; font-size: 40px; color: green" class="fa fa-check-circle"></i>
                                            <i id="notVerionControlled" style="display: none; font-size: 40px; color: darkred" class="fa fa-times-circle"></i>
                                        </label>
                                    </td>
                                    </tbody>
                                </table>
                            </div>
                            <label>

                            </label>
                        </div>
                    </div>
                </div>

                <div class="column">
                    <h3> Documentation Content </h3>
                    <div class="row marketing">
                        <div class="jumbotron">
                            <div class="table-responsive">
                                <table class="table tablesorter">
                                    <thead>
                                    <tr>
                                        <th><h4>Level up</h4></th>
                                        <th class="col-md-5"><h4>Level</h4></th>
                                    </tr>
                                    </thead>
                                    <tbody id="doc-content-table">
                                    <td> <a data-toggle="modal" data-target="#doc-content-editable-info">Document Editable</a></td>
                                    <td>
                                        <label>
                                            <i id="docEditable" style="display: none; font-size: 40px; color: green" class="fa fa-check-circle"></i>
                                            <i id="notEditable" style="display: none; font-size: 40px; color: darkred" class="fa fa-times-circle"></i>
                                        </label>
                                    </td>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="column">
                    <h3> UML Process </h3>
                    <div class="row marketing">
                        <div class="jumbotron">
                            <div class="table-responsive">
                                <table class="table tablesorter">
                                    <thead>
                                    <tr>
                                        <th><h4>Level up</h4></th>
                                        <th class="col-md-5"><h4>Level</h4></th>
                                    </tr>
                                    </thead>
                                    <tbody id="uml-process-table">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="column">
                    <h3> UML Content </h3>
                    <ul class="nav nav-tabs">
					    <li class="active"><a data-toggle="tab" href="#ovTab">Overview</a></li>
					    <li><a data-toggle="tab" href="#cdTab">Class Diagram</a></li>
					    <li><a data-toggle="tab" href="#scTab">Sequence Diagram</a></li>
				  	</ul>

					<div class="tab-content">
					    <div id="ovTab" class="tab-pane fade in active">
				         	<div class="row marketing">
		                        <div class="jumbotron">
		                            <div class="table-responsive">
		                                <table class="table tablesorter">
		                                    <thead>
		                                    <tr>
		                                        <th><h4>Type of Diagram</h4></th>
		                                        <th class="col-md-5"><h4>Contains</h4></th>
		                                    </tr>
		                                    </thead>
		                                    <tbody id="uml-content-table">
		                                    </tbody>
                                            <tr>
                                                <td> <a data-toggle="tab" href="#cdTab">CLass Diagram</a></td>
                                                <td>
                                                    <label>
                                                        <i id="containsCD" style="display: none; font-size: 40px; color: green" class="fa fa-check-circle"></i>
                                                        <i id="notContainsCD" style="display: none; font-size: 40px; color: darkred" class="fa fa-times-circle"></i>
                                                    </label>
                                                </td>
                                            </tr>
                                            <tr>
                                            <td><a data-toggle="tab" href="#scTab">Sequence Diagram</a></td>
                                            <td>
                                                <label>
                                                    <i id="containsSD" style="display: none; font-size: 40px; color: green" class="fa fa-check-circle"></i>
                                                    <i id="notContainsSD" style="display: none; font-size: 40px; color: darkred" class="fa fa-times-circle"></i>
                                                </label>
                                            </td>
                                            </tr>
                                            <tr>
                                                <td><a>Activity Diagram</a></td>
                                                <td>
                                                    <label>
                                                        <i id="containsAD" style="display: none; font-size: 40px; color: green" class="fa fa-check-circle"></i>
                                                        <i id="notContainsAD" style="display: none; font-size: 40px; color: darkred" class="fa fa-times-circle"></i>
                                                    </label>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td><a>Use Case Diagram</a></td>
                                                <td>
                                                    <label>
                                                        <i id="containsUD" style="display: none; font-size: 40px; color: green" class="fa fa-check-circle"></i>
                                                        <i id="notContainsUD" style="display: none; font-size: 40px; color: darkred" class="fa fa-times-circle"></i>
                                                    </label>
                                                </td>
                                            </tr>
		                                </table>
		                            </div>
		                        </div>
		                    </div>
					    </div>

					    <div id="cdTab" class="tab-pane fade">
					      <div class="row marketing">
                                <div class="jumbotron">
                                    <div class="table-responsive">
                                        <table class="table tablesorter">
                                            <thead>
                                            <tr>
                                                <th><h4>Level up</h4></th>
                                                <th class="col-md-5"><h4>Level</h4></th>
                                            </tr>
                                            </thead>
                                            <tbody id="uml-content-table-cd">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
					    </div>
					    <div id="scTab" class="tab-pane fade">
					      <div class="row marketing">
                                <div class="jumbotron">
                                    <div class="table-responsive">
                                        <table class="table tablesorter">
                                            <thead>
                                            <tr>
                                                <th><h4>Level up</h4></th>
                                                <th class="col-md-5"><h4>Level</h4></th>
                                            </tr>
                                            </thead>
                                            <tbody id="uml-content-table-sc">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
					    </div>
				    </div>
                </div>
            </div>
        </div>
    </div>

            <div id="mtest"> </div>

            <!-- MODAL - Commit Ratio INFO -->
            <div class="modal fade" id="uml-commit-ratio-info" role="dialog">
               <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content modal-content-size">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">UML Commit Ratio Indicator</h4>
                        </div>
                        <div class="modal-body modal-body-size">
                            <ul>
                                <li> <h5> Commit Ratio info: </h5>
                                    <p>This indicator shows the ratio between UML commits to all commits made in the project. The purpose of this indicator is to show the frequency of UML documentation updates in compare to code updates.<br>
                                    </p>
                                </li>
                                <li> <h5> Data collection: </h5>
                                    <p>The data is collected using GitHub commit history. The UML commit data is collected using Commit comments. A commit is counted as UML commit if the commit comment includes words such as UML, UML diagram, Documentation, Software Architecture etc.
                                    </p>
                                </li>
                                <li> <h5> Data analysis: </h5>
                                    <p>The data is turned into ratio between UML commits and all commits, and the ratio is between 0-1.
                                    </p>
                                </li>
                                <li> <h5> Level: </h5>
                                    <p>The levels are calculated by analysing the ratio data and translating it to a 1-5 scale. The levels are calculated as follows:
                                    </p>
                                    <ul>
                                        <li>0.0 - <0.2 = Level 1</li>
                                        <li>0.2 - <0.4 = Level 2 </li>
                                        <li>0.4 - <0.6 = Level 3 </li>
                                        <li>0.6 - <0.8 = Level 4 </li>
                                        <li>0.8 - <1.0 = Level 5 </li>
                                    </ul>
                                </li>
                                <li> <h5> How to Level Up: </h5>
                                    <p>The larger the ratio between UML commits and all commit the higher the level is, that is, to level up, the project contributors are supposed to update the UML document with design changes.
                                    </p>
                                </li>
                                <br>
                                <li> <h4> It should be noted that:</h4>
                                    <ul>
                                        <li> Software Development Methodology matters. For example, if the project follows Waterfall process, the UML document might be documented at the start of the project and not be updated very often later in the project. On the other hand, if the software development methodology is Agile, the document might be updated more frequently.
                                            UML Ninja does not have access to that data as for now. All projects are analysed equally.
                                        </li>
                                        <li>
                                            It could be that all the UML and architecture design decisions are documented at the start of the project and the document is not updated throughout the process. UML Ninja
                                        </li>
                                        <li>
                                            The size of the project matters. For example, projects that have 1 developer only and/or a few commits may have Level 5 for the indicator, but that does not necessarily mean the documentation practice is followed accordingly.
                                        </li>
                                        <li>The analysis is done on the models, and not the code. UML Ninja does not check the Model-Code differences, yet.
                                        </li>
                                    </ul>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>


            <!-- MODAL - Commit Ratio DETAIL-->
            <div class="modal fade" id="uml-commit-ratio-detail" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Commit Ratio</h4>
                        </div>
                        <div class="modal-body">
                            <div id="chartContainer" style="height: 370px; width: 100%;"></div>
                            <br>
                            <br>
                            <h4 id="commitRatio" >Commit Ratio </h4>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>

            <!-- MODAL - Doc Evolution INFO -->
            <div class="modal fade" id="document-evolution-info" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content modal-content-size">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Document Evolution Indicator</h4>
                        </div>
                        <div class="modal-body modal-body-size">
                            <ul>
                                <li> <h5> Document Evolution Info:</h5>
                                    <p>This indicator shows the ratio between UML document updates and the size of the document.
                                        The purpose of this indicator is to show the evolution of the UML document, that is, to show how the document has evolved considering the number of UML document update commits.
                                    </p>
                                </li>
                                <li> <h5> Data collection: </h5>
                                    <p>The data is collected using UML commits and the size of the UML document at the point where the project is being evaluated. The size of the document is measured in Megabytes.
                                    </p>
                                </li>
                                <li> <h5> Data analysis: </h5>
                                    <p>The data is turned into a ratio between UML commits and the size of the document, and the ratio is between 0-1.
                                    </p>
                                </li>
                                <li> <h5> Level: </h5>
                                    <p>The levels are calculated by analysing the ratio data and translating it to a 1-5 scale, where level 1 is the lowest level and level 5 is the highest level. The level measures how the document has evolved based the number of UML commits.
                                        The levels are calculated as follows:
                                    </p>
                                    <ul>
                                        <li>0.0 - <0.2 = Level 1</li>
                                        <li>0.2 - <0.4 = Level 2 </li>
                                        <li>0.4 - <0.6 = Level 3 </li>
                                        <li>0.6 - <0.8 = Level 4 </li>
                                        <li>0.8 - <1.0 = Level 5 </li>
                                    </ul>
                                </li>
                                <li> <h5> How to Level Up: </h5>
                                    <p>The level measures document evolution based on UML document updates. The larger the ratio the higher the level is. To level up the project, the document is expected to evolve in accordance to the number of UML document updates.
                                    </p>
                                </li>
                                <br>
                                <li> <h4> It should be noted that:</h4>
                                    <ul>
                                        <li> Software Development Methodology matters. For example, if the project follows Waterfall process, the UML document might be documented at the start of the project and not be updated very often later in the project. On the other hand, if the software development methodology is Agile, the document might be updated more frequently.
                                            UML Ninja does not have access to that data as for now. All projects are analysed equally.
                                        </li>
                                        <li>
                                            It could be that all the UML and architecture design decisions are documented at the start of the project and the document is not updated throughout the process. UML Ninja
                                        </li>
                                        <li>
                                            The size of the project matters. For example, projects that have 1 developer only and/or a few commits may have Level 5 for the indicator, but that does not necessarily mean the documentation practice is followed accordingly.
                                        </li>
                                        <li>The analysis is done on the models, and not the code. UML Ninja does not check the Model-Code differences, yet.
                                        </li>
                                    </ul>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <!-- MODAL - Doc Evolution DETAIL -->
            <div class="modal fade" id="document-evolution-detail" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Document Evolution</h4>
                        </div>
                        <div class="modal-body">
                            <div id="docChartContainer" style="height: 370px; width: 100%;"></div>
                            <br>
                            <br>
                            <h4 id="docEvolution"> Doc. size ratio to UML commits </h4>
                        </div>

                    </div>
                </div>
            </div>

              <!-- MODAL - Doc Evolution DETAIL -->
            <div class="modal fade" id="avsc-detail" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">AvsC</h4>
                        </div>
                        <div class="modal-body">
                            <div id="avsc-chart" style="height: 370px; width: 100%;"></div>
                            <br>
                            <br>
                            <h4 id="avsc-chart-info"> AvsC </h4>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>

                          <!-- MODAL - Doc Evolution DETAIL -->
            <div class="modal fade" id="asvsc-detail" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">ASvsC</h4>
                        </div>
                        <div class="modal-body">
                            <div id="asvsc-chart" style="height: 370px; width: 100%;"></div>
                            <br>
                            <br>
                            <h4 id="asvsc-chart-info"> ASvsC </h4>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>

            <!-- MODAL - Doc Evolution DETAIL -->
            <div class="modal fade" id="mevsc-detail" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">MevsC</h4>
                        </div>
                        <div class="modal-body">
                            <div id="mevsc-chart" style="height: 370px; width: 100%;"></div>
                            <br>
                            <br>
                            <h4 id="mevsc-chart-info"> MevsC </h4>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="appm-detail" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">APPM</h4>
                        </div>
                        <div class="modal-body">
                            <div id="appm-chart" style="height: 370px; width: 100%;"></div>
                            <br>
                            <br>
                            <h4 id="appm-chart-info"> APPM </h4>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="depvsc-detail" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">DEPvsC</h4>
                        </div>
                        <div class="modal-body">
                            <div id="depvsc-chart" style="height: 370px; width: 100%;"></div>
                            <br>
                            <br>
                            <h4 id="depvsc-chart-info"> DEPvsC </h4>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="dam-detail" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">DAM</h4>
                        </div>
                        <div class="modal-body">
                            <div id="dam-chart" style="height: 370px; width: 100%;"></div>
                            <br>
                            <br>
                            <h4 id="dam-chart-info"> DAM </h4>
                        </div>
                        <div class="modal-footer">
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="avsc-info" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content modal-content-size">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">AvsC Indicator</h4>
                        </div>
                        <div class="modal-body modal-body-size">
                            <ul>
                                <li> <h5> AvsC Indicator Info </h5>
                                    <p>The indicator is the relation between the number of attributes and
                                        number of classes in a UML Class Diagram. The indicator is defined as <br>
                                        (NAM / (NAM + NCM))^2 where NAM is the total number of attributes in the model, NCM is the total number of classes
                                        in the model, and (NAM + NCM) > 0
                                        If the value is higher, classes have more attributes and the model can be considered to be more complex. It is also possible that the model contains unnecessary
                                        information and does therefore not correspond to the modeling purpose. On the other hand, a lower value could be
                                        a hint for relevant but missing information.<br>
                                    </p>
                                </li>
                                <li> <h5> Data collection: </h5>
                                    <p>The data is collected using analysis of a UML Class Diagram pertaining to the project.
                                    </p>
                                </li>
                                <li> <h5> Data analysis: </h5>
                                    <p>The raw output is a value between 0 and 1 which is converted on a scale from 1-5.
                                    </p>
                                </li>
                                <li> <h5> Level: </h5>
                                    <p>The levels are calculated as follows:
                                    </p>
                                    <ul>
                                        <li>1.0> - 0.8 = Level 1</li>
                                        <li>0.8> - 0.6 = Level 2 </li>
                                        <li>0.6> - 0.4 = Level 3 </li>
                                        <li>0.4> - 0.2 = Level 4 </li>
                                        <li>0.2> - 0.0 = Level 5 </li>
                                    </ul>
                                  <li> <h5> How to Level Up: </h5>
                                    <p>The larger value could mean a complex diagram therefore to increase this indicator level, classes need to have fewer attributes. 
                                    </p>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
         </div>
<div class="modal fade" id="asvsc-info" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content modal-content-size">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">ASvsC Indicator</h4>
                        </div>
                        <div class="modal-body modal-body-size">
                           <ul>
                                <li> <h5> ASvsC Indicator Info </h5>
                                    <p>The indicator is the relation between the number of associations and
                                        number of classes in a UML Class Diagram. The indicator is defined as: <br>
                                        (NASM / (NASM + NCM))^2 where NASM is the total number of
                                        associations in the model, NCM is the total number of classes in the model, and (NASM + NCM) > 0.
                                        This metric is a complexity measurement for class diagrams. The worst case is when the value tends to be 0<br>
                                    </p>
                                </li>
                                <li> <h5> Data collection: </h5>
                                    <p>The data is collected using analysis of a UML Class Diagram pertaining to the project.
                                    </p>
                                </li>
                                <li> <h5> Data analysis: </h5>
                                    <p>The raw output is a value between 0 and 1 which is converted on a scale from 1-5.
                                    </p>
                                </li>
                                <li> <h5> Level: </h5>
                                    <p>The levels are calculated as follows:
                                    </p>
                                    <ul>
                                        <li>1.0> - 0.8 = Level 1</li>
                                        <li>0.8> - 0.6 = Level 2 </li>
                                        <li>0.6> - 0.4 = Level 3 </li>
                                        <li>0.4> - 0.2 = Level 4 </li>
                                        <li>0.2> - 0.0 = Level 5 </li>
                                    </ul>
                                 <li> <h5> How to Level Up: </h5>
                                    <p> Fewer associations between classes could increase the level of this indicator
                                    </p>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
</div>
<div class="modal fade" id="mevsc-info" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content modal-content-size">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">MEvsC Indicator</h4>
                        </div>
                        <div class="modal-body modal-body-size">
                            <ul>
                                <li> <h5> MEvsC Indicator Info </h5>
                                    <p>This indicator is the ratio between the number of methods and
                                      number of classes in a UML Class Diagram. It is defined as ( NOPM / (NOPM + NCM))^2 where NOPM is the total number of operations in the model, NCM is the total number of classes
                                      in the model <br>
                                      If the value is higher, the classes have a lot of methods (operations) and the model can be considered
                                      to be complex.<br>
                                    </p>
                                </li>
                                <li> <h5> Data collection: </h5>
                                    <p>The data is collected using analysis of a UML Class Diagram pertaining to the project.
                                    </p>
                                </li>
                                <li> <h5> Data analysis: </h5>
                                    <p>The raw output is a value between 0 and 1 which is converted on a scale from 1-5.
                                    </p>
                                </li>
                                <li> <h5> Level: </h5>
                                    <p>The levels are calculated as follows:
                                    </p>
                                    <ul>
                                        <li>1.0> - 0.8 = Level 1</li>
                                        <li>0.8> - 0.6 = Level 2 </li>
                                        <li>0.6> - 0.4 = Level 3 </li>
                                        <li>0.4> - 0.2 = Level 4 </li>
                                        <li>0.2> - 0.0 = Level 5 </li>
                                    </ul>
                                 <li> <h5> How to Level Up: </h5>
                                    <p> Fewer methods in classes could improve the indicator level.
                                    </p>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
<div class="modal fade" id="appm-info" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content modal-content-size">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">APPM Indicator</h4>
                        </div>
                        <div class="modal-body modal-body-size">
                            <ul>
                                <li> <h5> APPM Indicator Info </h5>
                                    <p>This indicator is the average number of parameters of all methods within the class <br>
                                      Parameters require more effort from clients, and high and low numbers of parameters imply a style of design. Lorenz and Kidd suggest 0.7 parameters per method as upper threshold.
                                    </p>
                                </li>
                                <li> <h5> Data collection: </h5>
                                    <p>The data is collected using analysis of a UML Class Diagram pertaining to the project.
                                    </p>
                                </li>
                                <li> <h5> Data analysis: </h5>
                                    <p>The raw output is a value between 0 and 1 which is converted on a scale from 1-5.
                                    </p>
                                </li>
                                <li> <h5> Level: </h5>
                                    <p>The levels are calculated as follows:
                                    </p>
                                    <ul>
                                        <li> >0.8 = Level 1</li>
                                        <li>0.2 - <0.0 = Level 2 </li>
                                        <li>0.4 - <0.2 = Level 3 </li>
                                        <li>0.6 - <0.4 = Level 4 </li>
                                        <li>0.8 - <0.6 = Level 5 </li>
                                    </ul>
                                 <li> <h5> How to Level Up: </h5>
                                    <p> Number of parameters used in methods can be decreased to get a value around 0.7 in order to receive the highest level for this indicator.
                                    </p>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
<div class="modal fade" id="depvsc-info" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content modal-content-size">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">DEPvsC Indicator</h4>
                        </div>
                        <div class="modal-body modal-body-size">
                           <ul>
                                <li> <h5> DEPvsC Indicator Info </h5>
                                    <p>This indicator is the relation between number of dependencies and
                                      number of classes in a UML Class Diagram. This metrics is defined as DEPvsC =
                                      (NDep / (NDep + NCM))^2 where NDep is the total number of dependencies in the model, NCM is the total number of
                                      classes in the model, and (NDep + NCM) > 0. <br>
                                      This is a complexity measurement for class diagram where the worst case is when the value tends to be 1 and the best case being when the value tends to be 0.
                                    </p>
                                </li>
                                <li> <h5> Data collection: </h5>
                                    <p>The data is collected using analysis of a UML Class Diagram pertaining to the project.
                                    </p>
                                </li>
                                <li> <h5> Data analysis: </h5>
                                    <p>The raw output is a value between 0 and 1 which is converted on a scale from 1-5.
                                    </p>
                                </li>
                                <li> <h5> Level: </h5>
                                    <p>The levels are calculated as follows:
                                    </p>
                                    <ul>
                                        <li>1.0> - 0.8 = Level 1</li>
                                        <li>0.8> - 0.6 = Level 2 </li>
                                        <li>0.6> - 0.4 = Level 3 </li>
                                        <li>0.4> - 0.2 = Level 4 </li>
                                        <li>0.2> - 0.0 = Level 5 </li>
                                    </ul>
                                 <li> <h5> How to Level Up: </h5>
                                    <p> Decrease in number of dependecies in the class diagram can help in levelling up in this indicator.
                                    </p>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
<div class="modal fade" id="dam-info" role="dialog">
			  <div class="modal-dialog">
			      <!-- Modal content-->
			      <div class="modal-content modal-content-size">
			          <div class="modal-header">
			              <button type="button" class="close" data-dismiss="modal">&times;</button>
			              <h4 class="modal-title">DAM Indicator</h4>
			          </div>
			          <div class="modal-body modal-body-size">
			              
			             <ul>
			                  <li> <h5> DAM Indicator Info </h5>
			                      <p>This indicator is the ration between number of private and protected attributes and total number of attributes (data access metric). <br>
			                      This indicator is used to measure the encapsulation. If the value is close to 1, the encapsulation tends to be good.
			                      </p>
			                  </li>
			                  <li> <h5> Data collection: </h5>
			                      <p>The data is collected using analysis of a UML Class Diagram pertaining to the project.
			                      </p>
			                  </li>
			                  <li> <h5> Data analysis: </h5>
			                      <p>The raw output is a value between 0 and 1 which is converted on a scale from 1-5.
			                      </p>
			                  </li>
			                  <li> <h5> Level: </h5>
			                      <p>The levels are calculated as follows:
			                      </p>
			                      <ul>
			                          <li>0.0 - <0.2 = Level 1</li>
			                          <li>0.2 - <0.4 = Level 2 </li>
			                          <li>0.4 - <0.6 = Level 3 </li>
			                          <li>0.6 - <0.8 = Level 4 </li>
			                          <li>0.8 - <1.0 = Level 5 </li>
			                      </ul>
			                   <li> <h5> How to Level Up: </h5>
			                      <p> To increase levels in this indicator, its best to have equal number of private + protected attributes when compared to the total number of attributes.
			                      </p>
			                  </li>
			              </ul>
			          </div>
			        <div class="modal-footer">
			        </div>
			      </div>
			  </div>
            </div>




            <!-- MODAL - Document Process Version Control INFO -->
            <div class="modal fade" id="doc-process-version-control-info" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content modal-content-size">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Version Control Info</h4>
                        </div>
                        <div class="modal-body modal-body-size">

                            <ul>
                                <li> <h5> Process Document Version Control Info </h5>
                                    <p>This indicator checks if the document is under version control.
                                    </p>
                                </li>
                                <li> <h5> Data collection: </h5>
                                    <p>The data is collected using information on the document versions.
                                    </p>
                                </li>
                                <li> <h5> Data analysis: </h5>
                                    <p>The raw output is a boolean, True if the document is under version control and False otherwise.
                                    </p>
                                </li>
                                <li> <h5> Score </h5>
                                    <ul>
                                        <li>If the document is under version control, the project receives 2 points, otherwise no points</li>
                                        <li>If the document is under version control, the a green check appears next to the indicator,
                                            otherwise a red cross appears next to the indicator </li>

                                    </ul>
                                <li> <h5> How to get the 2 points </h5>
                                    <p> Make the project documentation under a version control system
                                    </p>
                                </li>
                            </ul>

                        </div>
                    </div>
                </div>
            </div>




                <!-- MODAL - Document Content Editable  INFO -->
                <div class="modal fade" id="doc-content-editable-info" role="dialog">
                    <div class="modal-dialog">
                        <!-- Modal content-->
                        <div class="modal-content modal-content-size">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Document Editable Info</h4>
                            </div>
                            <div class="modal-body modal-body-size">

                                <ul>
                                    <li> <h5> Process Document Editable Info </h5>
                                        <p>This indicator checks if the document is editable or not. That is, to if the document is dynamic or static.
                                            A dynamic document can be in Word or be an online document that can be edited nd updated
                                        </p>
                                    </li>
                                    <li> <h5> Data collection: </h5>
                                        <p>The data is collected using file extension, e.g. .pdf, .docx etc.
                                        </p>
                                    </li>
                                    <li> <h5> Data analysis: </h5>
                                        <p>The raw output is a boolean, True if the document is editable and False otherwise.
                                        </p>
                                    </li>
                                    <li> <h5> Score </h5>
                                        <ul>
                                            <li>If the document is editable, the project receives 2 points, otherwise no points.
                                                That is because an editable file allows updates and changes and it prevents having clone and duplicate document</li>
                                            <li>If the document is editable, then a green check appears next to the indicator,
                                                otherwise a red cross appears next to the indicator </li>

                                        </ul>
                                    <li> <h5> How to get the 2 points </h5>
                                        <p> Make the project documentation editable.
                                        </p>
                                    </li>
                                </ul>

                            </div>
                        </div>
                    </div>
                </div>

<script>
var indicatorEnum = {
  UML_PROCESS: 'uml-process-table',
  UML_CONTENT: 'uml-content-table',
  UML_CONTENT_CD: 'uml-content-table-cd',
  UML_CONTENT_SC: 'uml-content-table-sc',
  DOC_PROCESS: 'doc-process-table',
  DOC_CONTENT: 'doc-content-table'
};

var umlProcessIndicators = [];
var umlContentIndicators = [];
var docProcessIndicators = [];
var docContentIndicators = [];
var umlContentIndicatorsCD = [];
var umlContentIndicatorsSC = [];

function Indicator(name,value,minVal,maxVal,type){
  this.name = name;
  this.value = value;
  this.minVal = minVal;
  this.maxVal = maxVal;
  this.type = type;

  this.longName = function(){
    if (this.name == "AvsC") return "Attributes vs Class";
    else if (this.name == "ASvsC") return "Associations vs Class";
    else if (this.name == "MevsC") return "Methods vs Class";
    else if (this.name == "APPM") return "Average Parameters per Method";
    else if (this.name == "DEPvsC") return "Dependencies vs Class";
    else if (this.name == "DAM") return "Data Access Metrics";

    else return this.name;
  }
  this.infoLink = function(){
    return this.name.replace(/\W+/g, '-').toLowerCase() + "-info";
  }

  this.detailLink = function(){
    return this.name.replace(/\W+/g, '-').toLowerCase() + "-detail";
  }

  this.adjustedValue = function(){
      if (this.name == "UML Commit Ratio" || this.name == "Document Evolution" ) {
        if (this.value >= 0 && this.value <= 0.2){
        return 1;
      }
      if (this.value > 0.2 && this.value <= 0.4){
        return 2;
      }
      if (this.value > 0.4 && this.value <= 0.6){
        return 3;
      }
      if (this.value > 0.6 && this.value <= 0.8){
        return 4;
      }
      if (this.value > 0.8){
        return 5;
      }
      else {
        return 0;
      }
    }

    else {
      var newValue = ((value - minVal) / (maxVal - minVal)) * 5;
      if (newValue < 0.5) {
        return 1;
      }
      else if (newValue > 5 && this.name == "APPM") {
        return 1; 
      }
      else return Math.round(newValue);
    }
  }

  this.update = function(property,updatedValue){
    switch (property){
      case "name":
        this.name = updatedValue;
        break;

      case "value":
        this.value = updatedValue;
        break;

      case "minVal":
        this.minVal = updatedValue;
        break;

      case "maxVal":
        this.maxVal = updatedValue;
        break;

      /*case "link":
        this.link = updatedValue;
        break;*/

      case "type":
        this.type = updatedValue;
        break;

      default:
        Console.log("Property name " + property + " does not exist in Indicators");
    }
  }
}

// Maybe dont even need to have 2 arrays for each separate indicator type as type is already stored.
function addIndicator (name,value,minVal,maxVal,type){
  var x = new Indicator(name,value,minVal,maxVal,type);
  switch(type){
    case indicatorEnum.UML_PROCESS:
      umlProcessIndicators.push(x);
      break;

    case indicatorEnum.UML_CONTENT:
      umlContentIndicators.push(x);
      break;

    case indicatorEnum.UML_CONTENT_CD:
    umlContentIndicatorsCD.push(x);
    break;

    case indicatorEnum.UML_CONTENT_SC:
    umlContentIndicatorsSC.push(x);
    break;

    case indicatorEnum.DOC_PROCESS:
    docProcessIndicators.push(x);
    break;

    case indicatorEnum.DOC_CONTENT:
    docContentIndicators.push(x);
  }
}

function changeIndicatorValue (indicatorName, propertyName, updatedValue){
  var processIndex = umlProcessIndicators.indexOf(indicatorName);
  var contentIndex = umlContentIndicators.indexOf(indicatorName);

  if (processIndex != -1){
    umlProcessIndicators[processIndex].update (propertyName,updatedValue);
  }
  else if (contentIndex != 1){
    umlContentIndicators[contentIndex].update(propertyName,updatedValue);
  }

  else {
    Console.log("Indicator of the name " + indicatorName + " does not exist.");
  }
}

//That's how the data object should look like.
var exampleDataObject =
        [{
            "indicatorName": "UML Commit Ratio",
            "indicatorInfoModal": "commit-ratio-info",
            "IndicatorDetailModal": "commit-ratio-detail",
            "indicatorLevel": 1
        },
            {
                "indicatorName": "Document Evolution",
                "indicatorInfoModal": "/doc-evolution/",
                "IndicatorDetailModal": "doc-evolution",
                "indicatorLevel": 2
            },
            {
                "indicatorName": "Document Evolution",
                "indicatorInfoModal": "/doc-evolution/",
                "IndicatorDetailModal": "doc-evolution",
                "indicatorLevel": 3
            },
            {
                "indicatorName": "Document Evolution",
                "indicatorInfoModal": "/doc-evolution/",
                "IndicatorDetailModal": "doc-evolution",
                "indicatorLevel": 4
            }];


    // This is how a new object (indicator) is added. Logic is needed to make level dynamic based on calx.
    exampleDataObject.push({"indicatorName" : "This is pushed later", "indicatorLink" : "/there/" , "indicatorLevel" : 5});

    /*function doModal(heading, formContent) {
      console.log("This is called with heading " + heading + " and content " + formContent);
      $('#avsc-info .modal-body').text(heading);
      $('#avsc-info .modal-title').text(formContent);
    }*/

// make ID a parameter
function createModal() {
    var mo = "<div class='modal fade' id='commit-ratio-info' role='dialog'><div class='modal-dialog'><div class='model-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal'>&times;</button><h4 class='modal-title'>YYYYYYYYAAAAAAAA </h4></div><div class='modal-body'><h5>WWWOOOOHHHOOOOO  </h5></div><div class='modal-footer'></div></div></div></div>";
    console.log(mo);
    var here = $('#mtest');
    console.log(here);
    here.html(mo);
}

    /*
    $("#avsc-info").on("show.bs.collapse shown.bs.collapse",function(event){
      alert("Test");
    });
    */

    /*var testingMat = "<ul> <li> <h5> Commit Ratio info: </h5> <p>This indicator shows the ratio between UML commits to all commits made in the project. The purpose of this indicator is to show the frequency of UML documentation updates in compare to code updates.<br></p></li><li> <h5> Data collection: </h5><p>The data is collected using GitHub commit history. The UML commit data is collected using Commit comments. A commit is counted as UML commit if the commit comment includes words such as UML, UML diagram, Documentation, Software Architecture etc.</p></li></ul>";
    function ShowImageInModal() {
        jQuery.noConflict();
    (function ($) {
        document.getElementById("mevsc-info").querySelector(".modal-body").innerHTML = testingMat;
        //var mymodal = $('#mevsc-info');
        //mymodal.find('.modal-body').text('helllloooooo');
        $('#mevsc-info').modal('show');
    }
    )(jQuery);
    }
ShowImageInModal();*/

    function createTable (object, tbody){
        var tBody = document.getElementById(tbody);
        for (var i = 0; i < object.length; i++) {
            var tr = "<tr>";
            tr += "<td><a data-toggle= 'modal' data-target=#" + object[i].infoLink()+ ">" + object[i].longName() + "</a></td> ";

            //var mymodal = $('#uml-commit-ratio-info');
            //mymodal.find('.modal-body').text('helllloooooo');

            if (object[i].adjustedValue() == 1) {
                tr += " <td><div class='progress'><div class='progress-bar progress-bar-danger' data-toggle= 'modal' data-target=#" + object[i].detailLink() + " role='progressbar' style='width: 20%' > <span><strong>" + object[i].adjustedValue() + "/5 </strong></span></div></div></td></tr>"
            }
            if (object[i].adjustedValue() == 2) {
                tr += " <td><div class='progress'><div class='progress-bar progress-bar-warning' data-toggle= 'modal' data-target=#" + object[i].detailLink() + " role='progressbar' style='width: 40%' > <span><strong>" + object[i].adjustedValue() + "/5 </strong></span></div></div></td></tr>"
            }
            if (object[i].adjustedValue() == 3) {
                tr += " <td><div class='progress'><div class='progress-bar progress-bar-warning' data-toggle= 'modal' data-target=#" + object[i].detailLink() + " role='progressbar' style='width: 60%' > <span><strong>" + object[i].adjustedValue() + "/5 </strong></span></div></div></td></tr>"
            }
            if (object[i].adjustedValue() == 4) {
                tr += " <td><div class='progress'><div class='progress-bar progress-bar-info' data-toggle= 'modal' data-target=#" + object[i].detailLink() + " role='progressbar' style='width: 80%' > <span><strong>" + object[i].adjustedValue() + "/5 </strong></span></div></div></td></tr>"
            }
            if (object[i].adjustedValue() == 5) {
                tr += " <td><div class='progress'><div class='progress-bar progress-bar-success' data-toggle= 'modal' data-target=#" + object[i].detailLink() + " role='progressbar' style='width: 100%' > <span><strong>" + object[i].adjustedValue() + "/5 </strong></span></div></div></td></tr>"
            }
            tBody.innerHTML += tr;
        }
    }

    $('#mevsc-info').on('show.bs.modal', function (e) {
    var $invoker = $(e.relatedTarget);
    console.log('gotcha bitch ', $invoker);
    console.log('gotcha bitch ', $invoker[0].getAttribute("0"));
});

    /* Global variables used to manipulate UI views */
    var score = 0;
    /* End of Global variable section */

    allData = {
        idProject : {{ data.idProject }},
        projectName : "{{data.ProjectName}}",
        projectURL : "{{ data.ProjectUrl }}",
        contributors : {{ data.Contributers }},
        documentName : "{{ data.DocumentName }}",
        allCommits : {{ data.NumberOfCommits }},
        umlCommits : {{ data.UMLCommits }},
        docSize : {{ data.DocumenSize }},
        aVsC : {{ data.AvsC }},
        asVsC : {{ data.ASvsC }},
        meVsC : {{ data.MevsC }},
        appm : {{ data.APPM }},
        depVsC : {{ data.DEPvsC }},
        dam : {{ data.DAM }},
        noc : {{ data.NOC }},
        noa : {{ data.NOA }},
        nom : {{ data.NOM }},
        classDiagram : "{{ data.classDiagram_link }}",
        sequenceDiagram : "{{ data.sequenceDiagram_link }}",
        usecaseDiagram : "{{ data.usecaseDiagram_link }}",
        stateDiagram : "{{ data.stateDiagram_link }}",
        activityDiagram : "{{ data.activityDiagram_link}}",
        isVersionControlled : {{data.isVersionControlled}},
        isEditable : {{data.isEditable}}
    };

    temp = [];
    //push all data in array for when it's needed
    temp.push(allData);
    console.log(temp);
    var projName = allData.projectName;
    var reposName = projName.substring(projName.lastIndexOf("/") + 1, projName.length);

    $('#repoName').append(reposName.bold());


    /* RATIO VALUES */
    var commitRatio = allData.umlCommits / allData.allCommits;
    commitRatio = commitRatio * 5;
    var docSize = allData.docSize;
    var numDiagrams = 0;
    if (allData.classDiagram != "") numDiagrams++;
    if (allData.sequenceDiagram != "") numDiagrams++;
    if (allData.activityDiagram != "") numDiagrams++;
    if (allData.stateDiagram != "") numDiagrams++;
    if (allData.usecaseDiagram != "") numDiagrams++;

    console.log("here is activity diagram " + allData.activityDiagram);


    var documentEvolution = allData.docSize / allData.umlCommits;
    documentEvolution = documentEvolution  * 5;
    addIndicator("AvsC",allData.aVsC, 0, 1, indicatorEnum.UML_CONTENT_CD);
    addIndicator("ASvsC",allData.asVsC, 0, 1, indicatorEnum.UML_CONTENT_CD);
    addIndicator("MevsC",allData.meVsC, 0, 1, indicatorEnum.UML_CONTENT_CD);
    addIndicator("APPM",allData.appm, 0, 1, indicatorEnum.UML_CONTENT_CD);
    addIndicator("DEPvsC",allData.depVsC, 1, 0, indicatorEnum.UML_CONTENT_CD);
    addIndicator("DAM",allData.dam, 0, 1, indicatorEnum.UML_CONTENT_CD);
    addIndicator("UML Commit Ratio", commitRatio, 0, 1, indicatorEnum.UML_PROCESS);
    addIndicator("Document Evolution", documentEvolution, 0, 1, indicatorEnum.DOC_PROCESS);


    addIndicator("Document Commit Ratio", numDiagrams, 0,5,indicatorEnum.DOC_PROCESS)


// create graphs
window.onload = function() {
    var dataPointsPie = [];
    var dataPointsDoc = [];
    var dataPointsAvsC = [];
    var dataPointsASvsC = [];
    var dataPointsMEvsC = [];
    var dataPointsAPPM = [];
    var dataPointsDEPvsC = [];
    var dataPointsDAM = [];

    dataPointsAvsC.push({y: allData.noc, label: "Number of Classes"});
    dataPointsAvsC.push({y: allData.noa, label: "Number of Attributes"});

    dataPointsASvsC.push({y: allData.noc, label: "Number of Classes"});
    dataPointsASvsC.push({y: allData.noc + 2, label: "Number of Associations"});

    dataPointsMEvsC.push({y: allData.nom, label: "Number of Methods"});
    dataPointsMEvsC.push({y: allData.noc, label: "Number of Classes"});

    dataPointsAPPM.push({y: allData.nom * 2 + 2, label: "Number of Parameters"});
    dataPointsAPPM.push({y: allData.nom, label: "Number of Methods"});

    dataPointsDEPvsC.push({y: allData.noc + 3, label: "Number of Dependencies"});
    dataPointsDEPvsC.push({y: allData.noc, label: "Number of Classes"});

    dataPointsDAM.push({y: allData.noa - 2, label: "Private Attributes"});
    dataPointsDAM.push({y:allData.noa - 4, label: "Protected Attributes"});
    dataPointsDAM.push({y: allData.noa, label: "Total Attributes"});


    var processData = [];
    var contentData = [];
    temp.forEach( function (arrayItem)
    {
        //data for uml commits
        dataPointsPie.push({y: arrayItem.allCommits , name : "All Commits" });
        dataPointsPie.push({y: arrayItem.umlCommits , name : "UML Commits" });

        // data for  doc evolution
        dataPointsDoc.push({y: arrayItem.docSize , label : "Document Size, in MB" });
        dataPointsDoc.push({y: arrayItem.umlCommits , label : "Number of UML Commits" });
    });

    createTable(umlProcessIndicators, 'uml-process-table');
    createTable(umlContentIndicators , 'uml-content-table');
    createTable(umlContentIndicatorsCD , 'uml-content-table-cd');
    createTable(umlContentIndicatorsSC , 'uml-content-table-sc');

    createTable(docProcessIndicators, 'doc-process-table');
    createTable(docContentIndicators, 'doc-content-table');


    allData.isVersionControlled === 1 ? ($('#versionControlled').show() , score+=2) : ($('#notVerionControlled').show(),$('#mainPL').append("<b>, Java</b>"));
    allData.isEditable === 1 ? (($('#docEditable').show() , score+=2), $('#mainPL').append("<b>, Javascript</b>")) : $('#notEditable').show();

    console.log(allData.classDiagram);
    console.log(allData.activityDiagram);
    console.log(allData.usecaseDiagram)

    allData.classDiagram != "" ? ($('#containsCD').show() , score+=2 ) : $('#notContainsCD').show();
    allData.sequenceDiagram != "" ? ($('#containsSD').show() , score+=2) : $('#notContainsSD').show();
    allData.activityDiagram != "" ? ($('#containsAD').show() , score+=2) : $('#notContainsAD').show();
    allData.usecaseDiagram != "" ? ($('#containsUD').show() , score+=2) : $('#notContainsUD').show();



    /*
    allData.isEditable === 1 ? ($('#versionControlled').show() , score+=2) : $('#notVerionControlled').show();
    allData.isEditable === 1 ? ($('#versionControlled').show() , score+=2) : $('#notVerionControlled').show();
    allData.isEditable === 1 ? ($('#versionControlled').show() , score+=2) : $('#notVerionControlled').show();
    allData.isEditable === 1 ? ($('#versionControlled').show() , score+=2) : $('#notVerionControlled').show();
    allData.isEditable === 1 ? ($('#versionControlled').show() , score+=2) : $('#notVerionControlled').show();
    allData.isEditable === 1 ? ($('#versionControlled').show() , score+=2) : $('#notVerionControlled').show();
    allData.isEditable === 1 ? ($('#versionControlled').show() , score+=2) : $('#notVerionControlled').show();


    if(allData.isVersionControlled === 1){
        $('#versionControlled').show();
        score+=2;
    }
    if (allData.isVersionControlled === 0){
        $('#notVerionControlled').show();
    }

    if(allData.isEditable === 1){
        $('#docEditable').show();
        score+=2;
    }
    if (allData.isEditable === 0){
        $('#notEditable').show();
    }
*/

    var chart = new CanvasJS.Chart("chartContainer", {
        exportEnabled: true,
        animationEnabled: true,
        title: {
            text: "All Commits vs. UML Commits"
        },
        theme: "theme2",
        legend: {
            cursor : "pointer",
            itemclick: explodePie
        },
        data: [{
            type: "doughnut",
            showInLegend: true,
            startAngle: 240,
            percentFormatString: "#0.##",
            toolTipContent: "{y}",
            yValueFormatString: "##0 Commits",
            indexLabel: "#percent%",
            dataPoints: dataPointsPie

        }]
    });
    chart.render();
    //commitRatio = commitRatio * 10;
    $('#commitRatio').html("Commit ratio: " + commitRatio.toFixed(2).bold().big());



// Another way to get alldata, as an array
    /*
    var arrayData = [];
    arrayData.push({{ data.idProject }});
    arrayData.push("{{ data.ProjectName }}");
    arrayData.push("{{ data.ProjectUrl }}");
    arrayData.push({{ data.Contributers }});
    arrayData.push("{{ data.DocumentName }}");
    arrayData.push({{ data.NumberOfCommits }});
    arrayData.push({{ data.UMLCommits }});
    arrayData.push({{ data.DocumenSize }});
*/

    var docChart = new CanvasJS.Chart("docChartContainer", {
        exportEnabled: true,
        animationEnabled: true,
        title: {
            text: "Document Size vs. UML Commits"
        },
        theme: "theme2",
        legend: {
            cursor : "pointer",
            itemclick: explodePie
        },
        data: [{
            type: "column",
            startAngle: 240,
            dataPoints: dataPointsDoc

        }]
    });
    $('#docEvolution').html("Document Evolution: " + documentEvolution.toFixed(3).bold().big());
    docChart.render();

    var avscChart = new CanvasJS.Chart("avsc-chart", {
        exportEnabled: true,
        animationEnabled: true,
        title: {
            text: "AvsC"
        },
        theme: "theme2",
        legend: {
            cursor : "pointer",
            itemclick: explodePie
        },
        data: [{
            type: "column",
            startAngle: 240,
            dataPoints: dataPointsAvsC
        }]
    });
    $('#avsc-chart-info').html("AvsC: " + umlContentIndicatorsCD.find(item => item.name === "AvsC").value.toFixed(3).bold().big());
    avscChart.render();

    var asvscChart = new CanvasJS.Chart("asvsc-chart", {
        exportEnabled: true,
        animationEnabled: true,
        title: {
            text: "AvsC"
        },
        theme: "theme2",
        legend: {
            cursor : "pointer",
            itemclick: explodePie
        },
        data: [{
            type: "column",
            startAngle: 240,
            dataPoints: dataPointsASvsC
        }]
    });
    $('#asvsc-chart-info').html("ASvsC: " + umlContentIndicatorsCD.find(item => item.name === "ASvsC").value.toFixed(3).bold().big());
    asvscChart.render();

    var mevscChart = new CanvasJS.Chart("mevsc-chart", {
        exportEnabled: true,
        animationEnabled: true,
        title: {
            text: "MevsC"
        },
        theme: "theme2",
        legend: {
            cursor : "pointer",
            itemclick: explodePie
        },
        data: [{
            type: "column",
            startAngle: 240,
            dataPoints: dataPointsMEvsC
        }]
    });
    $('#mevsc-chart-info').html("MevsC: " + umlContentIndicatorsCD.find(item => item.name === "MevsC").value.toFixed(3).bold().big());
    mevscChart.render();

    var appmChart = new CanvasJS.Chart("appm-chart", {
        exportEnabled: true,
        animationEnabled: true,
        title: {
            text: "APPM"
        },
        theme: "theme2",
        legend: {
            cursor : "pointer",
            itemclick: explodePie
        },
        data: [{
            type: "column",
            startAngle: 240,
            dataPoints: dataPointsAPPM
        }]
    });
    $('#appm-chart-info').html("APPM: " + umlContentIndicatorsCD.find(item => item.name === "APPM").value.toFixed(3).bold().big());
    appmChart.render();

    var depvscChart = new CanvasJS.Chart("depvsc-chart", {
        exportEnabled: true,
        animationEnabled: true,
        title: {
            text: "DEPvsC"
        },
        theme: "theme2",
        legend: {
            cursor : "pointer",
            itemclick: explodePie
        },
        data: [{
            type: "column",
            startAngle: 240,
            dataPoints: dataPointsDEPvsC
        }]
    });
    $('#depvsc-chart-info').html("DEPvsC: " + umlContentIndicatorsCD.find(item => item.name === "DEPvsC").value.toFixed(3).bold().big());
    depvscChart.render();

    var damChart = new CanvasJS.Chart("dam-chart", {
        exportEnabled: true,
        animationEnabled: true,
        title: {
            text: "DAM"
        },
        theme: "theme2",
        legend: {
            cursor : "pointer",
            itemclick: explodePie
        },
        data: [{
            type: "column",
            startAngle: 240,
            dataPoints: dataPointsDAM
        }]
    });
    $('#dam-chart-info').html("DAM: " + umlContentIndicatorsCD.find(item => item.name === "DAM").value.toFixed(3).bold().big());
    damChart.render();

/*docChart.options.data[0].dataPoints = testDataPoints;
docChart.render();*/

//From Canvasjs
function explodePie (e) {
    if(typeof (e.dataSeries.dataPoints[e.dataPointIndex].exploded) === "undefined" || !e.dataSeries.dataPoints[e.dataPointIndex].exploded) {
        e.dataSeries.dataPoints[e.dataPointIndex].exploded = true;
    } else {
        e.dataSeries.dataPoints[e.dataPointIndex].exploded = false;
    }
    e.chart.render();
}

    // Sum up score from the indicators
    for(var i = 0; i< umlProcessIndicators.length; i++){
        score += umlProcessIndicators[i].adjustedValue();
    }
    for(var i = 0; i< umlContentIndicators.length; i++){
        score += umlContentIndicators[i].adjustedValue();
    }
    for(var i = 0; i< umlContentIndicatorsCD.length; i++){
        score += umlContentIndicatorsCD[i].adjustedValue();
    }
    for(var i = 0; i< docProcessIndicators.length; i++){
        score += docProcessIndicators[i].adjustedValue();
    }
    for(var i = 0; i< docContentIndicators.length; i++){
        score += docContentIndicators[i].adjustedValue();
    }
    var scoreEl = $('#score').html("Over all score: " + score + '/' + 44);

    $('#umlScore').html("UML score: " + (score - 10) + '/' + 40 );
    var scoreEl = $('#score').html("Score: " + score + '/' + 45);

}
</script>

<script src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
<script src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>
</body>
</html>
